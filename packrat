#!/usr/bin/env bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-

if [ -z "${1}" -o ! -d "${1}" ]; then
    echo "ERROR: You must specify a valid destination directory where data will be collected!"
    exit 1
else
    DEST_DIR="${1}/packrat-archive"
fi

if [ -d "${DEST_DIR}" ]; then
    echo "ERROR: A packrat archive already exists at '${DEST_DIR}'!"
    exit 2
elif ! mkdir "${DEST_DIR}"; then
    echo "ERROR: Could not create destination directory '${DEST_DIR}' for collected data!"
    exit 3
fi

################################################################################

function header() {
    echo "################################################################################"
    echo "${1}"
    echo "################################################################################"
}

function footer() {
    echo -e "################################################################################\n\n"
}

function create_dir() {
    local DEST="${1}"

    if ! mkdir --verbose ${DEST}; then
	echo "ERROR: Could not create '${DEST}'!"
    fi
}

function run_collectors() {
    local DEST="${1}"

    collect_package_manager_info "${DEST}"
    collect_cpu_info "${DEST}"
    collect_device_info "${DEST}"
    collect_system_info "${DEST}"
    collect_kernel_info "${DEST}"
    collect_block_info "${DEST}"
    collect_memory_info "${DEST}"
}

function collect_package_manager_info() {
    local DEST="${1}/package-manager"

    header "package-manager"
    create_dir "${DEST}"

    if which rpm > /dev/null 2>&1; then
	rpm -qa > "${DEST}/rpm.qa.out" 2>&1
    fi

    footer
}

function collect_cpu_info() {
    local DEST="${1}/cpu"

    header "cpu"

    create_dir "${DEST}"

    lscpu > "${DEST}/lscpu.normal.out" 2>&1
    lscpu --all --extended > "${DEST}/lscpu.all.out" 2>&1
    lscpu --parse > "${DEST}/lscpu.parse.out" 2>&1

    mkdir "${DEST}/vulnerabilities"
    cp /sys/devices/system/cpu/vulnerabilities/* "${DEST}/vulnerabilities"

    footer
}

function collect_device_info() {
    local DEST="${1}/device"

    header "device"

    create_dir "${DEST}"

    lspci -tv > "${DEST}/lspci.hierarchy.out" 2>&1
    lspci -vvv > "${DEST}/lspci.verbose.out" 2>&1

    cp /proc/interrupts "${DEST}/proc-interrupts"

    footer
}

function collect_system_info() {
    local DEST="${1}/system"

    header "system"

    create_dir "${DEST}"

    dmidecode > "${DEST}/dmidecode.out" 2>&1
    lstopo-no-graphics --whole-system --whole-io --verbose > "${DEST}/lstopo.out" 2>&1

    footer
}

function collect_kernel_info() {
    local DEST="${1}/kernel"

    header "kernel"

    create_dir "${DEST}"

    dmesg --ctime --show-delta > "${DEST}/dmesg.out" 2>&1
    uname --all > "${DEST}/uname.out" 2>&1
    cp /proc/cmdline "${DEST}/proc-cmdline"
    cp /proc/modules "${DEST}/proc-modules"

    if pushd /sys/module > /dev/null; then
	create_dir "${DEST}/sys-module"

	local MODULE=""
	for MODULE in $(ls -1d * ); do
	    local MODULE_FILE="${DEST}/sys-module/${MODULE}"

	    touch "${MODULE_FILE}"

	    if pushd "${MODULE}" > /dev/null; then
		local SUBDIR=""
		for SUBDIR in "parameters"; do
		    if pushd "${SUBDIR}" > /dev/null; then
			local FILE=""
			for FILE in $(ls -1 *); do
			    PRINT_FILE=$(echo "${FILE}" | sed -e "s|\./||")
			    echo "${SUBDIR}/${PRINT_FILE}:" >> "${MODULE_FILE}"
			    cat "${FILE}" >> "${MODULE_FILE}"
			    echo >> "${MODULE_FILE}"
			done

			popd > /dev/null
		    fi
		done

		popd > /dev/null
	    fi
	done

	popd > /dev/null
    fi

    footer
}

function collect_block_info() {
    local DEST="${1}/block"

    header "block"

    create_dir "${DEST}"

    local LSBLK="lsblk --all --topology --discard --fs --perms --paths"
    ${LSBLK} > "${DEST}/lsblk.normal.out" 2>&1
    ${LSBLK} --pairs > "${DEST}/lsblk.key-value.out" 2>&1

    dmsetup ls > "${DEST}/dmsetup.ls.out" 2>&1
    dmsetup table > "${DEST}/dmsetup.table.out" 2>&1

    cp /proc/partitions "${DEST}/proc-partitions"
    cp /proc/mounts "${DEST}/proc-mounts"
    cp /proc/mdstat "${DEST}/proc-mdstat"

    create_dir "${DEST}/lvm"
    pvs --all --verbose > "${DEST}/lvm/pvs.out" 2>&1
    vgs --all --verbose > "${DEST}/lvm/vgs.out" 2>&1
    lvs --all --verbose > "${DEST}/lvm/lvs.out" 2>&1
    pvdisplay --verbose > "${DEST}/lvm/pvdisplay.out" 2>&1
    vgdisplay --verbose > "${DEST}/lvm/vgdisplay.out" 2>&1
    lvdisplay --verbose --maps > "${DEST}/lvm/lvdisplay.out" 2>&1

    if pushd /sys/block > /dev/null; then
	create_dir "${DEST}/sys-block"

	local BLKDEV=""
	for BLKDEV in $(ls -1d *); do
	    local BLKDEV_FILE="${DEST}/sys-block/${BLKDEV}"

	    touch "${BLKDEV_FILE}"

	    if pushd "${BLKDEV}" > /dev/null; then
		local FILE=""
		for FILE in $(find . -maxdepth 1 -type f | sort); do
		    local PRINT_FILE=$(echo "${FILE}" | sed -e "s|\./||")
		    echo "${PRINT_FILE}:" >> "${BLKDEV_FILE}"
		    cat "${FILE}" >> "${BLKDEV_FILE}"
		    echo >> "${BLKDEV_FILE}"
		done

		local SUBDIR=""
		for SUBDIR in "queue" "mq"; do
		    if pushd "${SUBDIR}" > /dev/null; then
			for FILE in $(find . -type f | sort); do
			    PRINT_FILE=$(echo "${FILE}" | sed -e "s|\./||")
			    echo "${SUBDIR}/${PRINT_FILE}:" >> "${BLKDEV_FILE}"
			    cat "${FILE}" >> "${BLKDEV_FILE}"
			    echo >> "${BLKDEV_FILE}"
			done

			popd > /dev/null
		    fi
		done

		popd > /dev/null
	    fi
	done

	popd > /dev/null
    fi

    footer
}

function collect_memory_info() {
    local DEST="${1}/memory"

    header "memory"

    create_dir "${DEST}"

    cp /proc/meminfo "${DEST}/proc-meminfo"
    cp /proc/slabinfo "${DEST}/proc-slabinfo"
    cp /proc/zoneinfo "${DEST}/proc-zoneinfo"
    cp /proc/buddyinfo "${DEST}/proc-buddyinfo"
    cp /proc/pagetypeinfo "${DEST}/proc-pagetypeinfo"

    footer
}

################################################################################

run_collectors "${DEST_DIR}" > "${DEST_DIR}/run_collectors.out" 2>&1
